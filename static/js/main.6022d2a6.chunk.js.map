{"version":3,"sources":["components/Navbar.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","rel","id","this","props","account","width","height","src","concat","Identicon","toString","Component","Main","_this","role","style","maxWidth","onSubmit","event","preventDefault","content","postContent","value","createPost","type","ref","input","placeholder","required","posts","map","post","key","author","window","web3","utils","fromWei","tipAmount","name","onClick","toWei","console","log","target","tipPost","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","socialNetwork","postCount","loading","bind","assertThisInitialized","loadWeb3","loadBlockchainData","ethereum","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","net","getId","networkId","networkData","SocialNetwork","networks","Contract","abi","address","methods","i","toConsumableArray","_this2","send","from","_ref","asyncToGenerator","regenerator_default","mark","_callee4","err","txh","wrap","_context4","prev","next","stop","_x","_x2","apply","arguments","_this3","_ref2","_callee5","_context5","_x3","_x4","components_Navbar","components_Main","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6022d2a6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Identicon from 'identicon.js';\r\n\r\n\r\nclass Navbar extends Component{\r\n    render(){\r\n        return (\r\n            <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n          <h3\r\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n          \r\n            rel=\"noopener noreferrer\"\r\n          >\r\n           Social Network\r\n            </h3>\r\n          <ul className=\"navbar-nav px-3\">\r\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\r\n          <small className=\"text-secondary\">\r\n              <small id=\"account\"> {this.props.account}</small>\r\n          </small>    \r\n          {\r\n              this.props.account ? \r\n                \r\n          <img className=\"ml-z\"   \r\n          width='30'\r\n          height='30'\r\n          src={`data:image/png;base64, ${new Identicon(this.props.account,30).toString()}`}\r\n          />   :\r\n            <span>  </span>\r\n          } \r\n          </li>\r\n          </ul>\r\n        </nav>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport Identicon from 'identicon.js';\r\n\r\n\r\nclass Main extends Component{\r\n    render(){\r\n        return (\r\n            <div className=\"container-fluid mt-5\">\r\n            <div className=\"row\">\r\n              <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '500px' }}>\r\n                <div className=\"content mr-auto ml-auto\">\r\n\r\n\r\n\r\n                <p>&nbsp;</p>\r\n                <form onSubmit={(event) => {\r\n                  event.preventDefault()\r\n                  const content = this.postContent.value\r\n                  this.props.createPost(content)\r\n                }}>\r\n                <div className=\"form-group mr-sm-2\">\r\n                  <input\r\n                    id=\"postContent\"\r\n                    type=\"text\"\r\n                    ref={(input) => { this.postContent = input }}\r\n                    className=\"form-control\"\r\n                    placeholder=\"What's on your mind?\"\r\n                    required />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary btn-block\">Share</button>\r\n              </form>\r\n              <p>&nbsp;</p>\r\n\r\n\r\n\r\n\r\n\r\n                 {\r\n                   this.props.posts.map((post, key) => {\r\n                     return(\r\n                    <div className=\"card mb-4\" key={key}>\r\n                     <div className=\"card-header\">\r\n                     <img className=\"mr-z\"   \r\n                     width='30'\r\n                     height='30'\r\n                     src={`data:image/png;base64, ${new Identicon(post.author,30).toString()}`}\r\n                     /> \r\n                        <small className=\"text-muted\">{post.author}</small>\r\n                      </div>\r\n                      <ul id=\"postList\" className=\"list-group list-group-flush\">\r\n                      <li className=\"list-group-item\">\r\n                        <p>{post.content}</p>\r\n                      </li>\r\n                      <li key={key} className=\"list-group-item py-2\">\r\n                        <small className=\"float-left mt-1 text-muted\">\r\n                          TIPS: {window.web3.utils.fromWei(post.tipAmount.toString(),'Ether')} ETH\r\n                        </small>\r\n                        <button\r\n                            className=\"btn btn-link btn-sm float-right pt-0\"\r\n                            name={post.id}\r\n                            onClick={(event) => {\r\n                              let tipAmount = window.web3.utils.toWei('0.1', 'Ether')\r\n                              console.log(event.target.name, tipAmount)\r\n                              this.props.tipPost(event.target.name, tipAmount)\r\n                            }}>\r\n                         TIPS 0.1 ETH\r\n                            </button>\r\n                        \r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n  \r\n                )\r\n                   })\r\n                 }\r\n                </div>\r\n              </main>\r\n            </div>\r\n          </div>\r\n        \r\n       \r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Main;","import React, { Component } from 'react';\r\nimport Web3 from 'web3';\r\nimport Identicon from 'identicon.js';\r\nimport './App.css';\r\nimport SocialNetwork from '../abis/SocialNetwork.json'\r\nimport Navbar from './Navbar';\r\nimport Main from './Main'\r\n \r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\nasync loadWeb3(){\r\n  if (window.ethereum) {\r\n    window.web3 = new Web3(window.ethereum)\r\n    await window.ethereum.enable()\r\n  }\r\n  else if (window.web3) {\r\n    window.web3 = new Web3(window.web3.currentProvider)\r\n  }\r\n  else {\r\n    window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n  }\r\n}\r\n\r\n  async loadBlockchainData(){\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    console.log(accounts)\r\n    this.setState({ account: accounts[0] })\r\n    // Network ID\r\n   \r\n    const networkId = await web3.eth.net.getId()\r\n    console.log(networkId)\r\n    const networkData  = SocialNetwork.networks[networkId]\r\n    if(networkData){\r\n      console.log(SocialNetwork.networks[networkId])\r\n      const socialNetwork = web3.eth.Contract(SocialNetwork.abi,networkData.address)\r\n      console.log(socialNetwork)\r\n      this.setState({socialNetwork})\r\n      const postCount = await socialNetwork.methods.postCount().call()\r\n      this.setState({postCount})\r\n      console.log(postCount)\r\n      for(var i=1;i<=postCount;i++){\r\n        const post = await socialNetwork.methods.posts(i).call()\r\n        this.setState({\r\n          posts:[...this.state.posts,post]\r\n        })\r\n      }\r\n      this.setState({loading:false})\r\n      console.log({posts: this.state.posts})\r\n    }\r\n    else{\r\n      window.alert(\"Not deployed\")  \r\n    }\r\n    \r\n  }\r\n  createPost(content){\r\n    this.setState({ loading: true })\r\n    this.state.socialNetwork.methods.createPost(content).send({ from: this.state.account },\r\n      async  (err,txh)=> {\r\n        if(err)\r\n        {\r\n            console.log(err)\r\n        }\r\n        else {\r\n            console.log(txh)\r\n            //await this.getPostsOnCreation()\r\n            await console.log(\"creatingPost \"+this.state.postCount)\r\n            this.setState({ loading : false })\r\n           // window.location.reload(); \r\n \r\n        }})\r\n    \r\n    \r\n  }\r\n\r\n  tipPost(id, tipAmount) {\r\n    this.setState({ loading: true })\r\n    this.state.socialNetwork.methods.tipPost(id).send({ from: this.state.account, value: tipAmount },\r\n      async  (err,txh)=> {\r\n        if(err)\r\n        {\r\n            console.log(err)\r\n        }\r\n        else {\r\n            console.log(txh)\r\n            //await this.getPostsOnCreation()\r\n            // await console.log(\"creatingPost \"+this.state.postCount)\r\n            \r\n            // window.location.reload(); \r\n             this.setState({ loading : false })\r\n \r\n        }})\r\n  }\r\n\r\n \r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      account : '',\r\n      socialNetwork:null,\r\n      postCount:0,\r\n      posts:[],\r\n      loading:false\r\n    }\r\n    this.createPost = this.createPost.bind(this)\r\n    this.tipPost = this.tipPost.bind(this)\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n          <Navbar account={this.state.account} />\r\n          {\r\n            this.state.loading ? <div id=\"loader\" className=\"text-center mt-5\"><p>loading.....</p> </div> :\r\n            <Main\r\n             posts = {this.state.posts}\r\n             createPost = {this.createPost}\r\n             tipPost={this.tipPost}\r\n             />\r\n          } \r\n            \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}